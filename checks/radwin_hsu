#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
#
# Plugin for monitoring Radwin Base Station 5000 series
#
# Date: 2022-01-28
#
# Author: Wojciech Repi≈Ñski
# email: wrepinski@gmail
#

factory_settings["radwin_hsu_default_levels"] = {
    'rss_hbs': (-65.0, -70.0),
    'rss_hsu': (-65.0, -70.0),
}


def _convert_mac(mac):
    return "".join([ "%02X" % int(n,16) for n in mac.split(":") ])


def inventory_radwin_hsu(info):

    for line in info[0]:
        mac = line[6]
        if mac != "":
            mac = _convert_mac(mac) 
            yield (mac, "radwin_hsu_default_levels")


def check_radwin_hsu(item, params, info):

    hsu_params = info[1]

    for line in info[0]:
        mac = line[6]
        if mac != "":
            hsu_sn = ""
            rss_hbs = int(-95)
            rss_hsu = int(-95)

            rss_hbs_warn = 0
            rss_hbs_crit = 0
            rss_hsu_warn = 0
            rss_hsu_crit = 0

            if "rss_hbs" in params:
                rss_hbs_warn, rss_hbs_crit = params["rss_hbs"]
            if "rss_hsu" in params:
                rss_hsu_warn, rss_hsu_crit = params["rss_hsu"]

            hsu_id = int(line[1])
            hsu_location = line[2]
            hsu_ip = line[5]

            mac = _convert_mac(mac)
            if mac == item:
                for hsu_param in hsu_params:
                    if mac == hsu_param[0]:
                        hsu_sn = hsu_param[1]
                        rss_hbs = int(hsu_param[2])
                        rss_hsu = int(hsu_param[3])
                        if rss_hbs < -95:
                            rss_hbs = int(-95)
                        if rss_hsu < -95:
                            rss_hsu = int(-95)

                perfdata = [
                    ("HBS_RSS_Rx", rss_hbs, rss_hbs_warn, rss_hbs_crit, -99, -30),
                    ("HSU_RSS_Rx", rss_hsu, rss_hsu_warn, rss_hsu_crit, -99, -30),
                ]

                infotext = " - Klient ID: %d , %s , SN: %s, IP: %s, RSS Rx(HBS/HSU): %d/%d" % \
                    (hsu_id, hsu_location, hsu_sn, hsu_ip, rss_hbs, rss_hsu)

                if (rss_hbs <= rss_hbs_crit) or (rss_hsu <= rss_hsu_crit):
                    return (2, "CRIT" + infotext, perfdata)
                elif (rss_hbs <= rss_hbs_warn) or (rss_hsu <= rss_hsu_warn):
                    return (1, "WARN" + infotext, perfdata)
                elif (rss_hbs > rss_hbs_warn) or (rss_hsu > rss_hsu_warn):
                    return (0, "OK" + infotext, perfdata)
                else:
                    return (0, "OK - Not connected" + infotext, perfdata)
    if item != "":
        return (2, "CRIT - HSU %s not found" % item)
    else:
        return (3, "UNKNOWN - HSU %s not found" % item)


check_info['radwin_hsu'] = {
    'check_function'        : check_radwin_hsu,
    'service_description'   : 'HSU %s',
    'has_perfdata'          : True,
    'inventory_function'    : inventory_radwin_hsu,
    'snmp_info'             : [ 
                                ( '.1.3.6.1.4.1.4458.1000.3.1',
                                [
                                OID_END, 
                                '6.2.1.4',              # 1 - HSU Name
                                '6.2.1.5',              # 2 - HSU Location name
                                '6.2.1.3',              # 3 - Max Downlink Kbps
                                '6.2.1.2',              # 4 - Max Uplin Kbps
                                '6.2.1.31',             # 5 - IP address HSU
                                '6.2.1.12',             # 6 - MAC address           
                                ]),
                                ( '.1.3.6.1.4.1.4458.1000.3.1',
                                [
                                '7.2.1.19',             # 0 - MAC address
                                '7.2.1.13',             # 1 - SN HSU
                                '7.2.1.9',              # 2 - RSS - HBS side
                                '7.2.1.11',             # 3 - RSS - HSU side
                                ]),
                            ],
    'snmp_scan_function'    : \
    lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith('.1.3.6.1.4.1.4458.20.5.1.1'),
    'default_levels_variable': 'radwin_hsu_default_levels',
    'group': 'radwin_hsu',
}
